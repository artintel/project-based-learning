!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALIGN	src/memalloc.c	/^typedef char ALIGN[16];$/;"	t	file:
LSH_TOK_BUFSIZE	src/Shell.c	12;"	d	file:
LSH_TOK_DELIM	src/Shell.c	13;"	d	file:
builtin_func	src/Shell.c	/^int (*builtin_func[])(char **) = {$/;"	v
builtin_str	src/Shell.c	/^char *builtin_str[] = {$/;"	v
calloc	src/memalloc.c	/^void *calloc(size_t num, size_t nsize) {$/;"	f
free	src/memalloc.c	/^free(void *block) {$/;"	f
get_free_block	src/memalloc.c	/^header_t *get_free_block(size_t size) {$/;"	f
global_malloc_lock	src/memalloc.c	/^pthread_mutex_t global_malloc_lock;$/;"	v
head	src/memalloc.c	/^header_t *head, *tail;$/;"	v
header	src/memalloc.c	/^union header {$/;"	u	file:
header_t	src/memalloc.c	/^typedef union header header_t;$/;"	t	typeref:union:header	file:
is_free	src/memalloc.c	/^        unsigned is_free;$/;"	m	struct:header::__anon1	file:
ls_read_line	src/Shell.c	/^char *ls_read_line() {$/;"	f
lsh_cd	src/Shell.c	/^int lsh_cd(char **args) {$/;"	f
lsh_execute	src/Shell.c	/^int lsh_execute(char **args) {$/;"	f
lsh_exit	src/Shell.c	/^int lsh_exit(char **args) {$/;"	f
lsh_help	src/Shell.c	/^int lsh_help(char **args) {$/;"	f
lsh_launch	src/Shell.c	/^int lsh_launch(char **args) {$/;"	f
lsh_loop	src/Shell.c	/^void lsh_loop(void) {$/;"	f
lsh_num_builtins	src/Shell.c	/^int lsh_num_builtins() {$/;"	f
lsh_split_line	src/Shell.c	/^char **lsh_split_line(char *line) {$/;"	f
main	src/Shell.c	/^int main(int argc, char **argv) {$/;"	f
malloc	src/memalloc.c	/^void *malloc(size_t size) {$/;"	f
next	src/memalloc.c	/^        union header *next;$/;"	m	struct:header::__anon1	typeref:union:header::__anon1::header	file:
realloc	src/memalloc.c	/^void *realloc(void *block, size_t size) {$/;"	f
s	src/memalloc.c	/^    } s;$/;"	m	union:header	typeref:struct:header::__anon1	file:
size	src/memalloc.c	/^        size_t size;$/;"	m	struct:header::__anon1	file:
stub	src/memalloc.c	/^    ALIGN stub;$/;"	m	union:header	file:
tail	src/memalloc.c	/^header_t *head, *tail;$/;"	v
